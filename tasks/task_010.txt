# Task ID: 10
# Title: Implement Integration Tests
# Status: done
# Dependencies: 5, 6, 7
# Priority: medium
# Description: Create integration tests to verify the complete request-response cycle for all API endpoints.
# Details:
1. Install supertest for API testing:
```bash
npm install --save-dev supertest
```

2. Create `src/__tests__/integration/api.test.ts`:

```typescript
import request from 'supertest';
import app from '../../app';
import { UserStore } from '../../models/User';

describe('User API Integration Tests', () => {
  // Clear users before each test
  beforeEach(() => {
    // Access the private users array for testing purposes
    (UserStore as any).users = [];
    (UserStore as any).lastId = 0;
  });

  describe('GET /api/users', () => {
    it('should return an empty array when no users exist', async () => {
      const response = await request(app).get('/api/users');
      
      expect(response.status).toBe(200);
      expect(response.body).toEqual([]);
    });

    it('should return all users', async () => {
      // Create test users
      const user1 = UserStore.create({ name: 'John Doe', email: 'john@example.com' });
      const user2 = UserStore.create({ name: 'Jane Doe', email: 'jane@example.com' });
      
      const response = await request(app).get('/api/users');
      
      expect(response.status).toBe(200);
      expect(response.body.length).toBe(2);
      expect(response.body).toEqual(expect.arrayContaining([
        expect.objectContaining({ id: user1.id }),
        expect.objectContaining({ id: user2.id })
      ]));
    });
  });

  describe('GET /api/users/:id', () => {
    it('should return a user when valid ID is provided', async () => {
      const user = UserStore.create({ name: 'John Doe', email: 'john@example.com' });
      
      const response = await request(app).get(`/api/users/${user.id}`);
      
      expect(response.status).toBe(200);
      expect(response.body).toEqual(expect.objectContaining({
        id: user.id,
        name: user.name,
        email: user.email
      }));
    });

    it('should return 404 when user is not found', async () => {
      const response = await request(app).get('/api/users/999');
      
      expect(response.status).toBe(404);
      expect(response.body).toHaveProperty('error');
    });

    it('should return 400 when ID is invalid', async () => {
      const response = await request(app).get('/api/users/invalid');
      
      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty('error');
    });
  });

  describe('POST /api/users', () => {
    it('should create a new user with valid data', async () => {
      const userData = { name: 'John Doe', email: 'john@example.com' };
      
      const response = await request(app)
        .post('/api/users')
        .send(userData);
      
      expect(response.status).toBe(201);
      expect(response.body).toEqual(expect.objectContaining({
        id: expect.any(Number),
        name: userData.name,
        email: userData.email
      }));
      
      // Verify the user was added to the store
      const users = UserStore.getAll();
      expect(users.length).toBe(1);
    });

    it('should return 400 when name is missing', async () => {
      const response = await request(app)
        .post('/api/users')
        .send({ email: 'john@example.com' });
      
      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty('errors');
    });

    it('should return 400 when email is missing', async () => {
      const response = await request(app)
        .post('/api/users')
        .send({ name: 'John Doe' });
      
      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty('errors');
    });

    it('should return 400 when email format is invalid', async () => {
      const response = await request(app)
        .post('/api/users')
        .send({ name: 'John Doe', email: 'invalid-email' });
      
      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty('errors');
    });
  });

  // Similar tests for PUT and DELETE endpoints
});
```

# Test Strategy:
Run the integration tests using Jest with the command `npm test` or `npx jest src/__tests__/integration/api.test.ts`. Verify that all tests pass, indicating that the API endpoints function correctly. Check test coverage to ensure all endpoints, edge cases, and error handling are tested.
